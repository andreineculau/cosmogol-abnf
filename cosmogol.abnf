state-machine = *(comment-nl) statement 1*(statement / comment_nl)

statement = (declaration / transition / assignment) CRLFWSP ";" CRLFWSP

colon = CRLFWSP ":" CRLFWSP
comma = CRLFWSP "," CRLFWSP
equal = CRLFWSP "=" CRLFWSP
arrow = CRLFWSP "->" CRLFWSP

declaration = names colon value
; ALTERNATIVE: indicate the possible values in the grammar:
; declaration = names colon type
; type = "state" / "message" / "action"

assignment = name equal value

names = name *(comma name)

name = quoted-name / regular-identifier

quoted-name = DQUOTE 1*(identifier-chars) DQUOTE

regular-identifier =
            (ALPHA / DIGIT) *(["_" / "-"] (ALPHA / DIGIT))

transition = current-states colon
             messages arrow next-state
             [colon action]

; ALTERNATIVE : some people prefer to put the message first:
;transition = message colon
;             current-state arrow next-state
;             [colon action]

; ALTERNATIVE: some people prefer to see the current-state and
; the message grouped together:
;transition = left-paren current-state comma message right-paren
;             arrow next-state
;             [colon action]

; ALTERNATIVE: allow some grouping, for instance:
;   Signal1:
;     IDLE -> BUSY:
;       connectSubscriber;
;     CONNECTING -> DISCONNECTING:
;       disconnectSubscriber
; # Henk-Jan van Tuyl <hjgtuyl@chello.nl>

; ALTERNATIVE: allow more than one action, comma-separated
;  Marc Petit-Huguenin <marc@8x8.com>

current-states = names
messages = names
next-state = name
action = name

value = regular-identifier / quoted-name

identifier-chars = ALPHA / DIGIT /
                   "-" / "_" / "'" / "," / ";" / SP /
                   "." / "[" / "]" / "(" / ")" / "<" / ">" / "/"
                  ; All letters and digits and
                  ; some (a bit arbitrary) chars

comment = "#" *(WSP / VCHAR) [CR] LF

comment-nl = comment / [CR] LF

CRLFWSP = *([CR] LF) *WSP
